openapi: 3.0.0
info:
  title: DJ System API
  version: '1.0'
  description: MC支援サービス「DJ System」用API
servers:
  - url: 'http://localhost:3000'
tags:
  - name: room
    description: ルームの管理
  - name: music
    description: 音楽サービスとの連携
  - name: user
    description: ユーザー（管理者 & MC）の管理
paths:
  # TODO: parametersで必要情報を渡す。responseで、MC用のURLを返す
  /room:
    post:
      summary: ルーム作成
      tags:
        - room
      responses:
        "200":
          description: 成功
      security:
        - api_key: []
  /room/all:
    get:
      summary: 全ルーム情報取得（管理可能なルームのみ）
      tags:
        - room
      responses:
        "200":
          description: 成功
  /room/{roomID}:
    get:
      summary: ルーム個別情報表示
      tags:
        - room
      parameters:
        - name: roomID
          in: path
          description: 必ず1つのルームIDを送信する
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 成功
    put:
      summary: ルーム個別情報更新
      tags:
        - room
      parameters:
        - name: roomID
          in: path
          description: 必ず1つのルームIDを送信する
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 成功
    delete:
      summary: ルーム個別削除
      tags:
        - room
      parameters:
        - name: roomID
          in: path
          description: 必ず1つのルームIDを送信する
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 成功
        "400":
          description: api_keyが有効ではない
        "404":
          description: ルームが存在しない
  /room/{roomID}/request:
    post:
      summary: リクエスト送信
      tags:
        - room
      parameters:
        - name: roomID
          in: path
          description: 必ず1つのルームIDを送信する
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 成功
  /music/search:
    # TODO: 内部RoomID・検索ワードを送信
    get:
      summary: 音楽リクエスト
      tags:
        - music
      responses:
        "200":
          description: 成功
  /user:
    post:
      summary: ユーザー（管理者 & MC）を作成
      tags:
        - user
      responses:
        "200":
          description: 成功
  /user/login:
    # TODO: responsesで、Googleログインへの遷移URLを渡す
    get:
      summary: ユーザー（管理者 & MC）ログイン
      tags:
        - user
      responses:
        "200":
          description: 成功
  /user/loggedInGoogle:
    # TODO: parametersでGoogleログイン後に帰ってきたクエリを渡す。responseでapi_tokenを返す
    post:
      summary: Googleログイン後に呼び出す。クエリなどをサーバー側に渡す。
      tags:
        - user
      responses:
        "200":
          description: 成功
  /user/{userID}:
    # TODO: headerのauthに、api_tokenを渡す
    get:
      summary: ユーザー（管理者 & MC）情報取得
      tags:
        - user
      parameters:
        - name: userID
          in: path
          description: 必ず1つのユーザーIDを送信する
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 成功
    put:
      summary: ユーザー（管理者 & MC）情報更新
      tags:
        - user
      parameters:
        - name: userID
          in: path
          description: 必ず1つのユーザーIDを送信する
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 成功
    delete:
      summary: ユーザー（管理者 & MC）削除
      tags:
        - user
      parameters:
        - name: userID
          in: path
          description: 必ず1つのユーザーIDを送信する
          required: true
          schema:
            type: string
      responses:
        "204":
          description: 成功
        "401":
          description: "アクセス権限が不足（MCが自分ではないアカウントを削除しようとしている / 管理者でない）"
        "404":
          description: "既に削除済み or ユーザーが不明"
  /user/link/spotify:
    get:
      summary: Spotifyとの連携
      tags:
        - user
      responses:
        "200":
          description: 成功